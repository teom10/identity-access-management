# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

pr: none
resources:
 pipelines:
   - pipeline: identity-access-management
     source: identity-access-management-ci
     trigger:
      branches:
      - trunk

pool:
  vmImage: ubuntu-latest

stages:
- stage: Slot
  displayName: 'Slot Deployment'
  jobs:
    - job: notify
      pool: server
      steps:
        - task: InvokeRESTAPI@1
          inputs:
            connectionType: 'connectedServiceName'
            serviceConnection: 'NotifyManualReview'
            method: 'POST'
            headers: |
              {
              "Content-Type":"application/json"
              }
            body: |
              {
                  "@type": "MessageCard",
                  "@context": "http://schema.org/extensions",
                  "themeColor": "0076D7",
                  "summary": "Release Pipeline Notification",
                  "sections": [
                      {
                          "activityTitle": "$(Release.DefinitionName) ($(Release.version))",
                          "activitySubtitle": "deployed to $(Release.Environmentname)",
                          "activityImage": "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTy5ihdbdBvYPJ6cEoJFkF6ED9I7LnoaP22yg&usqp=CAU",
                          "facts": [
                              {
                                  "name": "Build",
                                  "value": "$(Build.DefinitionName) - $(Build.BuildNumber)"
                              },
                              {
                                  "name": "Release",
                                  "value": "$(Release.ReleaseName)"
                              },
                              {
                                  "name": "Branch",
                                  "value": "$(Build.SourceBranchName)"
                              },
                              {
                                  "name": "Commit",
                                  "value": "$(Build.SourceVersion)"
                              },
                              {
                                  "name": "Requested For:",
                                  "value": "$(Release.RequestedFor)"
                              },
                              {
                                  "name": "Date & Time:",
                                  "value": "$(Release.Deployment.Starttime)"
                              }
                          ],
                          "markdown": true
                      }
                  ],
                  "potentialAction": [
                      {
                          "@type": "OpenUri",
                          "name": "View Release",
                          "targets": [
                              {
                                  "os": "default",
                                  "uri": "$(Release.ReleaseWebUrl)"
                              }
                          ]
                      },
                      {
                          "@type": "OpenUri",
                          "name": "View Published URL",
                          "targets": [
                              {
                                  "os": "default",
                                  "uri": "$(Release.PublishedUrl)"
                              }
                          ]
                      }
                  ]
              }
            waitForCompletion: 'false'
        - task: ManualValidation@0
          name: mv
          inputs:
            instructions: 'validate'
    - deployment: slot
      environment: 'IdentityDev'
      displayName: 'Running Deploy'
      strategy:
       runOnce:
         deploy:
          steps:
          - script: |
              echo '$(resources.pipeline.identity-access-management.pipelineID)'
              echo '$(resources.pipeline.identity-access-management.runName)'
              echo $(resources.pipeline.identity-access-management.runID)
              echo $(resources.pipeline.identity-access-management.runURI)
              echo $(resources.pipeline.identity-access-management.sourceBranch)
              echo $(resources.pipeline.identity-access-management.sourceCommit)
              echo $(resources.pipeline.identity-access-management.sourceProvider)
              echo $(resources.pipeline.identity-access-management.requestedFor)
              echo $(resources.pipeline.identity-access-management.requestedForID)

          - script: |
              echo Add other tasks to build, test, and deploy your project.
              ls $(PIPELINE.WORKSPACE)
            displayName: 'Run a multi-line script'

          - download: identity-access-management
            artifact: drop
            patterns: '**/*.zip'
          - script: |
              ls $(PIPELINE.WORKSPACE)
            displayName: 'Run a multi-line script'
          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'Suscripción de Visual Studio Enterprise(9cf87bc8-69fd-42b2-bd98-a7c1adf50f63)'
              appType: 'webAppLinux'
              WebAppName: 'api-eyes'
              deployToSlotOrASE: true
              ResourceGroupName: 'labdevops'
              SlotName: 'pre'
              packageForLinux: '$(Pipeline.Workspace)/**/*.zip'
              RuntimeStack: 'DOTNETCORE|5.0'
    
- stage: Prod
  displayName: 'Prod Deployment'
  jobs:    
    - deployment: prod
      environment: 'IdentityProd'
      displayName: 'Running production deploy'
      strategy:
       runOnce:
        deploy:
         steps:
         - download: identity-access-management
           artifact: drop
           patterns: '**/*.zip'

         - task: AzureRmWebAppDeployment@4
           inputs:
             ConnectionType: 'AzureRM'
             azureSubscription: 'Suscripción de Visual Studio Enterprise(9cf87bc8-69fd-42b2-bd98-a7c1adf50f63)'
             appType: 'webAppLinux'
             WebAppName: 'api-eyes'
             packageForLinux: '$(Pipeline.Workspace)/**/*.zip'
             RuntimeStack: 'DOTNETCORE|5.0'
